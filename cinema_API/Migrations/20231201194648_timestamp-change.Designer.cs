// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using cinema_API.Models;

#nullable disable

namespace cinemaAPI.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    [Migration("20231201194648_timestamp-change")]
    partial class timestampchange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("cinema_API.Domain.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Actors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameOriginal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("cinema_API.Models.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("cinema_API.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdSession")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdSession");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("cinema_API.Models.OrderSeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdOrder")
                        .HasColumnType("integer");

                    b.Property<int>("IdSeat")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdOrder");

                    b.HasIndex("IdSeat");

                    b.ToTable("OrderSeats");
                });

            modelBuilder.Entity("cinema_API.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdHall")
                        .HasColumnType("integer");

                    b.Property<int>("IdSeatType")
                        .HasColumnType("integer");

                    b.Property<int>("Place")
                        .HasColumnType("integer");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdHall");

                    b.HasIndex("IdSeatType");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("cinema_API.Models.SeatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SeatTypes");
                });

            modelBuilder.Entity("cinema_API.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdHall")
                        .HasColumnType("integer");

                    b.Property<int>("IdMovie")
                        .HasColumnType("integer");

                    b.Property<int>("IdVideoType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdHall");

                    b.HasIndex("IdMovie");

                    b.HasIndex("IdVideoType");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("cinema_API.Models.SessionSeatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdSeatType")
                        .HasColumnType("integer");

                    b.Property<int>("IdSession")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdSeatType");

                    b.HasIndex("IdSession");

                    b.ToTable("SessionSeatTypes");
                });

            modelBuilder.Entity("cinema_API.Models.VideoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VideoTypes");
                });

            modelBuilder.Entity("cinema_API.Models.Order", b =>
                {
                    b.HasOne("cinema_API.Models.Session", "SessionNavigation")
                        .WithMany("OrderNavigation")
                        .HasForeignKey("IdSession")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionNavigation");
                });

            modelBuilder.Entity("cinema_API.Models.OrderSeat", b =>
                {
                    b.HasOne("cinema_API.Models.Order", "OrderNavigation")
                        .WithMany("OrderSeatNavigation")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cinema_API.Models.Seat", "SeatNavigation")
                        .WithMany("OrderSeatNavigation")
                        .HasForeignKey("IdSeat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderNavigation");

                    b.Navigation("SeatNavigation");
                });

            modelBuilder.Entity("cinema_API.Models.Seat", b =>
                {
                    b.HasOne("cinema_API.Models.Hall", "HallNavigation")
                        .WithMany("SeatNavigation")
                        .HasForeignKey("IdHall")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cinema_API.Models.SeatType", "SeatTypeNavigation")
                        .WithMany("SeatNavigation")
                        .HasForeignKey("IdSeatType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HallNavigation");

                    b.Navigation("SeatTypeNavigation");
                });

            modelBuilder.Entity("cinema_API.Models.Session", b =>
                {
                    b.HasOne("cinema_API.Models.Hall", "HallNavigation")
                        .WithMany("SessionNavigation")
                        .HasForeignKey("IdHall")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cinema_API.Domain.Movie", "MovieNavigation")
                        .WithMany("SessionNavigation")
                        .HasForeignKey("IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cinema_API.Models.VideoType", "VideoTypeNavigation")
                        .WithMany("SessionNavigation")
                        .HasForeignKey("IdVideoType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HallNavigation");

                    b.Navigation("MovieNavigation");

                    b.Navigation("VideoTypeNavigation");
                });

            modelBuilder.Entity("cinema_API.Models.SessionSeatType", b =>
                {
                    b.HasOne("cinema_API.Models.SeatType", "SeatTypeNavigation")
                        .WithMany("SessionSeatTypeNavigation")
                        .HasForeignKey("IdSeatType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cinema_API.Models.Session", "SessionNavigation")
                        .WithMany("SessionSeatTypeNavigation")
                        .HasForeignKey("IdSession")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeatTypeNavigation");

                    b.Navigation("SessionNavigation");
                });

            modelBuilder.Entity("cinema_API.Domain.Movie", b =>
                {
                    b.Navigation("SessionNavigation");
                });

            modelBuilder.Entity("cinema_API.Models.Hall", b =>
                {
                    b.Navigation("SeatNavigation");

                    b.Navigation("SessionNavigation");
                });

            modelBuilder.Entity("cinema_API.Models.Order", b =>
                {
                    b.Navigation("OrderSeatNavigation");
                });

            modelBuilder.Entity("cinema_API.Models.Seat", b =>
                {
                    b.Navigation("OrderSeatNavigation");
                });

            modelBuilder.Entity("cinema_API.Models.SeatType", b =>
                {
                    b.Navigation("SeatNavigation");

                    b.Navigation("SessionSeatTypeNavigation");
                });

            modelBuilder.Entity("cinema_API.Models.Session", b =>
                {
                    b.Navigation("OrderNavigation");

                    b.Navigation("SessionSeatTypeNavigation");
                });

            modelBuilder.Entity("cinema_API.Models.VideoType", b =>
                {
                    b.Navigation("SessionNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
